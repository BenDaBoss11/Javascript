<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width">
    <title>repl.it</title>
    <link href="index.css" rel="stylesheet" type="text/css" />
  </head>
  <body>
    <canvas id='snake' width='400' height='400'></canvas>
    <script src="index.js"></script>
  </body>
</html>


window.onload=function() {
    canv = document.getElementById("snake");
    pen = canv.getContext("2d");
    document.addEventListener("keydown",keyPush);
    setInterval(game,1000/15);
}
player_x=10;
player_y=10;
gridSize=20;
tileCount=20;
apple_x=15;
apple_y=15;
x_speed=0;
y_speed=0;
trail=[];
tail = 5;
lives = 3;
trigger = false;

function sleep (time) {
  return new Promise((resolve) => setTimeout(resolve, time));
}

function game() {
    // update player position each frame
    player_x+=x_speed;
    player_y+=y_speed;
    
    // detecting boundaries
    if(player_x < 0) {
      trigger = true;
      player_x = 10;
      player_y = 10;
      x_speed=0;
      y_speed=0;
      if (trigger === true){
        // Do something after the sleep!
        lives--;
        trigger = false;
      }
    }
    if(player_x > tileCount - 1) {
      trigger = true;
      player_x = 10;
      player_y = 10;
      x_speed=0;
      y_speed=0;
      if (trigger === true){
        lives--;
        trigger = false;
      }
    }
    if(player_y < 0) {
      trigger = true;
      player_x = 10;
      player_y = 10;
      x_speed=0;
      y_speed=0;
      if (trigger === true){
        lives--;
        trigger = false;
      }
    }
    if(player_y > tileCount - 1) {
      trigger = true;
      player_x = 10;
      player_y = 10;
      x_speed=0;
      y_speed=0;
      if (trigger === true){
        lives--;
        trigger = false;
      }
    }
 
    // create the black background
    pen.fillStyle="black";
    pen.fillRect(0,0,canv.width,canv.height);
 
 
    // player color
    pen.fillStyle="lime";
    
    
    for(var i=0;i<trail.length;i++) {
    
        pen.fillRect(trail[i].x*gridSize, trail[i].y*gridSize,gridSize-2,gridSize-2);
        
        // detect if the player hits the trail
        if(trail[i].x==player_x && trail[i].y==player_y) {
            // set the snake back to 5
            tail = 5;
            player_x = 10;
            player_y = 10;
            if (x_speed > 0 || y_speed > 0){
              lives--;
              trigger = false;
            }
        }
    }
    
    // adding player position to the trail
    trail.push({x:player_x,y:player_y});
    
    // this trims down the trail of the snake if it exceeds the actual length
    while(trail.length>tail) {
      // this deletes the first value in an array.
      trail.shift();
    }
    
    
    // detect collision
    if(apple_x == player_x && apple_y == player_y) {
        // adding 1 to the tail length.
        tail++;
        // moving to random x and y
        apple_x = Math.floor(Math.random()*tileCount);
        apple_y = Math.floor(Math.random()*tileCount);
    }
    
    
    // draw the apple.
    pen.fillStyle="yellow";
    pen.fillRect(apple_x*gridSize,apple_y*gridSize,gridSize-2,gridSize-2);
    
    // fill text 
    pen.fillStyle="white";
    pen.font="20px Arial";
    pen.fillText("Lives: " + lives, 20, 20);
    if(lives <= 0){
      pen.fillStyle="black";
      pen.fillRect(0,0,canv.width,canv.height);
      pen.fillStyle="Blue";
      pen.font="40px Arial";
      pen.textAlign = "center";
      pen.beginText ="middle";
      pen.fillText("Game Over",canv.width/2, canv.height/2);
    }
}
function keyPush(evt) {
    switch(evt.keyCode) {
        case 37:
            x_speed = -1;
            y_speed = 0;
            break;
        case 38:
            x_speed = 0;
            y_speed = -1;
            break;
        case 39:
            x_speed = 1;
            y_speed = 0;
            break;
        case 40:
            x_speed = 0;
            y_speed = 1;
            break;
    }
}

<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width">
    <title>repl.it</title>
    <link href="index.css" rel="stylesheet" type="text/css" />
  </head>
  <body>
    <canvas id="mycanvas">
    canvas not supported
    </canvas>
    <script src="index.js"></script>
  </body>
</html>


canvas = document.getElementById('mycanvas');
canvas.width = window.innerWidth-20;
canvas.height = window.innerHeight-20;
// adds canvas element to the HTML
pen = canvas.getContext('2d');
var fps = 30;
test = setInterval(update, 1000 / fps);
setInterval(spawn,1000);
// keyboard listener
//document.addEventListener('keydown', keyPush);

// touchscreen lisenters
document.addEventListener("touchmove", move, false);
document.addEventListener("touchstart", shoot, false);

// touch listeners
//document.addEventListener('touchmove', process_touchmove, false);

spaceship = new Image();
spaceship.src = "https://is4-ssl.mzstatic.com/image/thumb/Purple128/v4/98/aa/4d/98aa4d01-fe5d-6c87-a0b6-ef149f2be2e0/AppIcon-1x_U007emarketing-85-220-8.png/246x0w.jpg";



// player
player_x = 100;
player_y = canvas.height - 80;
player_dim = 30;
player_speed = 15;

// enemy
enemy_list = [];
enemy_dim = 25;
enemy_speed = 5;
// shots
shots_list = [];
shot_dim = 4;
shot_speed = 7;

//lives and score+
lives = 3;
score = 0;

// dragging position
var dragStart;
drag = false;



// spawn the enemies and assign x and y positions.
function spawn() {
	enemy_list.push({ x:Math.random() * canvas.width - enemy_dim, y:0 });
}


// update each screen
function update() {
	pen.fillStyle = 'black';
	pen.fillRect(0, 0, canvas.width, canvas.height);

	pen.drawImage(spaceship,player_x - player_dim / 2,player_y - player_dim / 2,player_dim,player_dim);
	//pen.fillStyle = 'white';
	// make it centered
  	/*
	pen.fillRect(
		player_x - player_dim / 2,
		player_y - player_dim / 2,
		player_dim,
		player_dim
	);
  	*/
	
	// drawing our shots list 
  	pen.fillStyle = 'lime';
	for (var s = 0; s < shots_list.length; s++) {
		shots_list[s].y -= shot_speed;

		pen.fillRect(
			shots_list[s].x - shot_dim / 2,
			shots_list[s].y - shot_dim / 2,
			shot_dim,
			shot_dim);
		for (var e = enemy_list.length - 1; e >= 0; e--) {
      // calculate the distance between the shots and enemies
			var diff_x = Math.abs(enemy_list[e].x - shots_list[s].x);
			var diff_y = Math.abs(enemy_list[e].y - shots_list[s].y);
			var dist = Math.sqrt(diff_x * diff_x + diff_y * diff_y);
      // detects if a shot hits the enemy
			if (dist < (shot_dim + enemy_dim) / 2) {
				enemy_list.splice(e, 1);
        		score+=10;
			}
		}
	}
  // drawing our enemy list
	pen.fillStyle = 'red';
	for (var e = 0; e < enemy_list.length; e++) {
		enemy_list[e].y += enemy_speed;
		pen.fillRect(
			enemy_list[e].x - enemy_dim / 2,
			enemy_list[e].y - enemy_dim / 2,
			enemy_dim,
			enemy_dim
		);

    // calculate the distance
		var diff_x = Math.abs(enemy_list[e].x - player_x);
		var diff_y = Math.abs(enemy_list[e].y - player_y);
		var dist = Math.sqrt(diff_x * diff_x + diff_y * diff_y);

    // detect if an enemy hits our hero.
		if (dist < (player_dim + enemy_dim) / 2) {
      // clear the stats and reset the player if he gets hit
			shots_list = [];
			enemy_list = [];
			//player_x = 100;
	        player_y = canvas.height - 80;
	        lives--;
			break;  
		}
	}
  pen.font = "Bold 20px Courier New"
  pen.fillText("Lives: "+lives,10,20)
  pen.fillText("Score: "+score,10,40)

  if (lives === 0){
    pen.fillStyle = "Black";
    pen.fillRect(0,0,canvas.width,canvas.height);
    pen.fillStyle = "red";
    pen.fillText("GAME OVER", 200, 200);
    pen.fillText("Score: "+ score, 200, 230);
    clearInterval(test);
  }

}

function shoot(e) {
  shots_list.push({ x: player_x, y: player_y });
}


function move(e) {
  // this checks if the user touches the screen
  if(e.touches.length == 1){
    player_x = e.touches[0].pageX - canvas.offsetLeft - player_dim / 2;
  }
  else if(e.touches.length == 3){
    lives = 3;
    enemy_list = [];
  }
}

<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no">
    <title>repl.it</title>
    <link href="index.css" rel="stylesheet" type="text/css"/>
  </head>
  <body>
    <canvas id="mycanvas">
    Sorry, canvas not supported
    </canvas>
    <script src="index.js">
      
      
    </script>
  </body>
</html>


canvas = document.getElementById('mycanvas');
canvas.width = window.innerWidth-20;
canvas.height = window.innerHeight-20;
// adds canvas element to the HTML
pen = canvas.getContext('2d');
var fps = 30;
test = setInterval(update, 1000 / fps);
setInterval(spawn,1000);
// keyboard listener
//document.addEventListener('keydown', keyPush);

// touchscreen lisenters
document.addEventListener("touchmove", move, false);
document.addEventListener("touchstart", shoot, false);

// touch listeners
//document.addEventListener('touchmove', process_touchmove, false);

spaceship = new Image();
spaceship.src = "http://pixelartmaker.com/art/91e7b11f006bac0.png";



// player
player_x = 100;
player_y = canvas.height - 80;
player_dim = 30;
player_speed = 15;

// enemy
enemy_list = [];
enemy_dim = 25;
enemy_speed = 5;
// shots
shots_list = [];
shot_dim = 4;
shot_speed = 7;

//lives and score+
lives = 3;
score = 0;

// dragging position
var dragStart;
drag = false;



// spawn the enemies and assign x and y positions.
function spawn() {
	enemy_list.push({ x:Math.random() * canvas.width - enemy_dim, y:0 });
}


// update each screen
function update() {
	pen.fillStyle = 'black';
	pen.fillRect(0, 0, canvas.width, canvas.height);

	pen.drawImage(spaceship,player_x - player_dim / 2,player_y - player_dim / 2,player_dim,player_dim);
	//pen.fillStyle = 'white';
	// make it centered
  	/*
	pen.fillRect(
		player_x - player_dim / 2,
		player_y - player_dim / 2,
		player_dim,
		player_dim
	);
  	*/
	
	// drawing our shots list 
  	pen.fillStyle = 'lime';
	for (var s = 0; s < shots_list.length; s++) {
		shots_list[s].y -= shot_speed;

		pen.fillRect(
			shots_list[s].x - shot_dim / 2,
			shots_list[s].y - shot_dim / 2,
			shot_dim,
			shot_dim);
		for (var e = enemy_list.length - 1; e >= 0; e--) {
      // calculate the distance between the shots and enemies
			var diff_x = Math.abs(enemy_list[e].x - shots_list[s].x);
			var diff_y = Math.abs(enemy_list[e].y - shots_list[s].y);
			var dist = Math.sqrt(diff_x * diff_x + diff_y * diff_y);
      // detects if a shot hits the enemy
			if (dist < (shot_dim + enemy_dim) / 2) {
				enemy_list.splice(e, 1);
        		score+=10;
			}
		}
	}
  // drawing our enemy list
	pen.fillStyle = 'red';
	for (var e = 0; e < enemy_list.length; e++) {
		enemy_list[e].y += enemy_speed;
		pen.fillRect(
			enemy_list[e].x - enemy_dim / 2,
			enemy_list[e].y - enemy_dim / 2,
			enemy_dim,
			enemy_dim
		);

    // calculate the distance
		var diff_x = Math.abs(enemy_list[e].x - player_x);
		var diff_y = Math.abs(enemy_list[e].y - player_y);
		var dist = Math.sqrt(diff_x * diff_x + diff_y * diff_y);

    // detect if an enemy hits our hero.
		if (dist < (player_dim + enemy_dim) / 2) {
      // clear the stats and reset the player if he gets hit
			shots_list = [];
			enemy_list = [];
			//player_x = 100;
	        player_y = canvas.height - 80;
	        lives--;
			break;  
		}
	}
  pen.font = "Bold 20px Courier New"
  pen.fillText("Lives: "+lives,10,20)
  pen.fillText("Score: "+score,10,40)

  if (lives === 0){
    pen.fillStyle = "Black";
    pen.fillRect(0,0,canvas.width,canvas.height);
    pen.fillStyle = "red";
    pen.fillText("GAME OVER", 200, 200);
    pen.fillText("Score: "+ score, 200, 230);
    clearInterval(test);
  }

}

function shoot(e) {
  shots_list.push({ x: player_x, y: player_y });
}


function move(e) {
  // this checks if the user touches the screen
  if(e.touches.length == 1){
    player_x = e.touches[0].pageX - canvas.offsetLeft - player_dim / 2;
  }
  else if(e.touches.length == 3){
    lives = 3;
    enemy_list = [];
  }
}
